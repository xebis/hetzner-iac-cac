---
name: Infrastructure Lifecycle

on:
  create:
  push:
  pull_request:
    types: [closed, opened, reopened, synchronize]
    branches:
      - main
  delete:

jobs:
  get-environment:
    name: "Get Environment Information"
    runs-on: ubuntu-latest
    outputs:
      environment_group_name: ${{ steps.get-environment-group.outputs.environment_group_name }}
      environment_uri: ${{ steps.get-environment.outputs.environment_uri }}

    steps:
      - name: Get environment group
        id: get-environment-group
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "environment_group_name=testing" >> $GITHUB_OUTPUT
            echo "environment_group_slug=test" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment_group_name=production" >> $GITHUB_OUTPUT
            echo "environment_group_slug=prod" >> $GITHUB_OUTPUT
          else
            echo "environment_group_name=development" >> $GITHUB_OUTPUT
            echo "environment_group_slug=dev" >> $GITHUB_OUTPUT
          fi

      - name: Get environment
        id: get-environment
        run: |
          # Have to meet requirements of https://docs.hetzner.com/cloud/servers/getting-started/creating-a-server/
          if [ "${{ steps.get-environment-group.outputs.environment_group_name }}" = "production" ]; then
            echo "environment_uri=${{ steps.get-environment-group.outputs.environment_group_slug }}" >> $GITHUB_OUTPUT
          else
            GITHUB_ENV_REF="${{ github.event.pull_request.number && format('pr/{0}', github.event.pull_request.number) || format('{0}/{1}', github.ref_type, github.ref_name) }}"
            GITHUB_ENV_REF_LOWER="${GITHUB_ENV_REF,,}"
            GITHUB_ENV_REF_STRIPPED=$(echo "$GITHUB_ENV_REF_LOWER" | sed 's/[^a-z0-9.-]/-/g')

            GITHUB_ENV_REF_SANITIZED="$GITHUB_ENV_REF_STRIPPED"
            while [[ ! "$GITHUB_ENV_REF_SANITIZED" =~ ^[a-z0-9] ]]; do
              GITHUB_ENV_REF_SANITIZED="${GITHUB_ENV_REF_SANITIZED:1}"
            done
            while [[ "$GITHUB_ENV_REF_SANITIZED" =~ [-.]$ ]]; do
              GITHUB_ENV_REF_SANITIZED="${GITHUB_ENV_REF_SANITIZED%?}"
            done

            if [ "${{ steps.get-environment-group.outputs.environment_group_name }}" = "development" ]; then
              GITHUB_ENV_REF_HASHED="${GITHUB_ENV_REF_SANITIZED:0:23}-"$(echo -n "$GITHUB_ENV_REF_SANITIZED" | sha1sum | cut -c1-6)
            else
              GITHUB_ENV_REF_HASHED="${GITHUB_ENV_REF_SANITIZED:0:32}"
            fi
            
            GITHUB_ENV_REF_URI="${{ steps.get-environment-group.outputs.environment_group_slug }}-$GITHUB_ENV_REF_HASHED"
            echo "environment_uri=$GITHUB_ENV_REF_URI" >> $GITHUB_OUTPUT
          fi

  provision:
    name: "Provision Infrastructure"
    runs-on: ubuntu-latest
    needs: get-environment
    if: github.event_name != 'pull_request' || github.event.action != 'closed' && github.event_name != 'delete'
    outputs:
      demo_ipv4_address: ${{ steps.get_terraform_outputs.outputs.demo_ipv4_address }}
    environment:
      name: ${{ needs.get-environment.outputs.environment_group_name }}

    steps:
      - name: Echo info
        run: echo "Provision ${{ needs.get-environment.outputs.environment_uri }}"

  wait:
    name: "Wait for Infrastructure"
    runs-on: ubuntu-latest
    needs: [get-environment, provision]
    environment:
      name: ${{ needs.get-environment.outputs.environment_group_name }}
    steps:
      - name: Echo info
        run: echo "Wait ${{ needs.get-environment.outputs.environment_uri }}"

  config:
    name: "Configure Infrastructure"
    runs-on: ubuntu-latest
    needs: [get-environment, provision, wait]
    environment:
      name: ${{ needs.get-environment.outputs.environment_group_name }}
    steps:
      - name: Echo info
        run: echo "Config ${{ needs.get-environment.outputs.environment_uri }}"

  destroy:
    name: "Destroy Infrastructure"
    runs-on: ubuntu-latest
    needs: get-environment
    if: github.event_name == 'pull_request' && github.event.action == 'closed' || github.event_name == 'delete'
    environment:
      name: ${{ needs.get-environment.outputs.environment_group_name }}

    steps:
      - name: Echo info
        run: echo "Destroy ${{ needs.get-environment.outputs.environment_uri }}"
