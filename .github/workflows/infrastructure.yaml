---
name: Infrastructure Lifecycle

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed, opened, reopened, synchronize]
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ENDPOINT_URL_S3: ${{ vars.AWS_ENDPOINT_URL_S3 }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
  ENVIRONMENT: ${{ github.event_name == 'push' && 'production' || github.event_name == 'pull_request' && 'testing' || 'development' }}
  TF_VAR_ssh_id_pub: ${{ vars.SSH_ID_PUB }}

jobs:
  provision:
    name: "Provision Infrastructure"
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.action != 'closed'
    environment:
      name: ${{ github.event_name == 'push' && 'production' || github.event_name == 'pull_request' && 'testing' || 'development' }}

    steps:
      - name: Checkout Terraform configuration
        uses: actions/checkout@v4
        with:
          sparse-checkout: terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0
      
      - name: Terraform init
        id: init
        run: terraform -chdir=terraform init
      
      - name: Terraform select or create workspace
        run: terraform -chdir=terraform workspace select -or-create "${ENVIRONMENT}"

      - name: Terraform plan
        id: plan
        run: terraform -chdir=terraform plan -no-color -input=false
        continue-on-error: true
      
      - name: Terraform plan as the PR comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('<!-- GitHub Actions Terraform PR comment bot -->')
            });

            // 2. Put together bot new comment contents for the PR
            const output = `<!-- GitHub Actions Terraform PR comment bot -->
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            // 3. Delete previous comment for the PR
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }

            // 4. Create a new comment
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        run: terraform -chdir=terraform apply -auto-approve -input=false

  test:
    name: "Test Infrastructure"
    runs-on: ubuntu-latest
    needs: provision
    environment:
      name: ${{ github.event_name == 'push' && 'production' || github.event_name == 'pull_request' && 'testing' || 'development' }}
    steps:
      - name: Checkout Terraform configuration
        uses: actions/checkout@v4
        with:
          sparse-checkout: terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0
      
      - name: Terraform init
        id: init
        run: terraform -chdir=terraform init
      
      - name: Terraform select or create workspace
        run: terraform -chdir=terraform workspace select "${ENVIRONMENT}"

      - name: Get SSH private key
        run: |
          cat <<EOF > ssh_id
          ${{ secrets.SSH_ID }}
          EOF
          chmod 600 ssh_id

      - name: Test SSH connection
        id: test
        run: |
          DEMO_IPV4_ADDRESS=$(terraform -chdir=terraform output -raw ipv4_address)
          if [ -n "$DEMO_IPV4_ADDRESS" ]; then
            # It takes some time until SSH server is ready (Hetzner server preparation, VM boot up, Cloud-init setup), usually around a minute with plenty of buffer at the top
            attempt=0
            max_attempts=30
            while [ $attempt -lt $max_attempts ]; do
              if ssh -i ssh_id -o StrictHostKeyChecking=no "github@$DEMO_IPV4_ADDRESS" echo 'Hello world from $(hostname)'; then
                echo "SSH connection attempt #$attempt successful"
                break
              else
                echo "SSH connection attempt #$attempt failed, retrying in 10 seconds..."
                attempt=$((attempt + 1))
                sleep 10
              fi
            done

            if [ $attempt -eq $max_attempts ]; then
              echo "SSH connection failed after $max_attempts attempts"
              exit 1
            fi    else
            echo "Skipping SSH connection test, Terraform output ipv4_address is empty"
          fi
        continue-on-error: true

      - name: Get SSH private key
        run: |
          rm ssh_id

      - name: Terraform plan status
        if: steps.test.outcome == 'failure'
        run: exit 1

  config:
    name: "Configure Infrastructure"
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: ${{ github.event_name == 'push' && 'production' || github.event_name == 'pull_request' && 'testing' || 'development' }}
    steps:
      - name: Checkout Terraform configuration
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ansible
            terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0
      
      - name: Terraform init
        id: init
        run: terraform -chdir=terraform init
      
      - name: Terraform select or create workspace
        run: terraform -chdir=terraform workspace select "${ENVIRONMENT}"
      
      - name: Install Ansible dependencies
        run: |
          pipx inject ansible-core requests python-dateutil

      - name: Install Ansible configuration dependencies
        run: ansible-galaxy collection install -r ansible/requirements.yaml

      - name: Get SSH private key
        run: |
          cat <<EOF > ssh_id
          ${{ secrets.SSH_ID }}
          EOF
          chmod 600 ssh_id

      - name: Add SSH fingerprint and private key
        run: |
          mkdir ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan $(terraform -chdir=terraform output -raw ipv4_address) >> ~/.ssh/known_hosts
          mv ssh_id ~/.ssh/id_ed25519

      - name: Run Ansible playbook
        id: ansible-playbook
        run: |
          sed -i "s/workspace/$(terraform -chdir=terraform workspace show)/" ansible/hcloud.yaml
          ansible-playbook -u github -i ansible/hcloud.yaml ansible/test.yaml
        continue-on-error: true

      - name: Remove SSH directory
        run: |
          rm -rf ~/.ssh

      - name: Ansible playbook status
        if: steps.ansible-playbook.outcome == 'failure'
        run: exit 1

  destroy:
    name: "Destroy Infrastructure"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    environment:
      name: ${{ github.event_name == 'push' && 'production' || github.event_name == 'pull_request' && 'testing' || 'development' }}

    steps:
      - name: Checkout Terraform configuration
        uses: actions/checkout@v4
        with:
          sparse-checkout: terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0
      
      - name: Terraform init
        id: init
        run: terraform -chdir=terraform init
      
      - name: Terraform select or create workspace
        run: terraform -chdir=terraform workspace select "${ENVIRONMENT}"
  
      - name: Terraform destroy
        run: terraform -chdir=terraform destroy -auto-approve -input=false
      
      - name: Terraform select default workspace
        run: terraform -chdir=terraform workspace select "default"

      - name: Terraform delete workspace
        run: terraform -chdir=terraform workspace delete "${ENVIRONMENT}"
